# -*- coding: utf-8 -*-
"""2059141_AnilPanjiyar_LinearRegression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LX8ZHYpY5iASxGgyCXLCY6AgCT7Gws4n

## New Section  Linear Rgression task 
## Name : Anil Panjiyar
## Group : lCG10

#  Linear Regression 
##  Linera Regression is the most common way and used to find the prediction .The goal of regression is to look at  relationship between two things firstly it examines the single  dependent varibale and  and one or more independent variables.The primitive form of regresson equation  of  single  dependent varibale and  and one or more independent variablewith  in the form of mathmatics is given below 
## y = b1x1 + b2x2 + … + bnxn + c.
## where y is dependent variables 
##     x1,x2 is independent variables and b the bias terms.
## Some of the major use of Linear regression are
##It is used to create a model to predict the value for a target variable
## Trend forecasting

# Implementation of Regression
The implementation of multiple linear regression on a dataset to predcit the salary of an engineer based on Company Name Job Title Location Salaries reported  and the Salary .
The follwoing regression model has been created with the use of the optimization algorithm gradient descent with the learning rate of 0.0001 over 100 iterations.
"""

#Necessary modules 
import pandas as pd # importing  pandas library for data analysis
import numpy as np # importing numpy library for array processing package which provied tools to work with array

#Loading the dataset 
#Load csv in Colab (not necessary in case of jupyter notebook)

from google.colab import files
uploaded = files.upload() # allows user to choose the file

"""# Data Understanding 
The process of extracting information from data through analytical and logical reasoning is known as data comprehension. The mean of the data is examined in this case so that the information may be used to make accurate decisions. 
 ALso finding the dependent varibale and indpendent vairable in the salary dataset to predict  the salary .There are five columns named Company Name':'Company_Name','Job Title':'Job_Title','Salaries Reported':'Salaries_Reported' . Where only Salary is dependent variabe
"""

#importing data in pandas
import io
data = pd.read_csv(io.BytesIO(uploaded['Salary Dataset.csv'])) # creating the variable data to load a file of salary dataset
#pd.read_csv it will provide the dataframew with data  laballed of the file 
data.head() # this will display only the data of first five rows of the dataset

data.info() # displaying the information the number of column and rows in the dataset

"""# Data Cleaning
Data cleaning is done by filling null values with 0 in order to enhance data quality. Once data cleaning is completed, all outdated information is removed, and the remaining data is ready to use. But in this case the name of the column are renamed and checked if there is any null value in the dataset

is Null()
This function is used in order to check if there is any null value in hte dataset

Is SUM() function
sum() function will display how many total nulls value are there in one column of the dataset
"""

data.isnull().sum()

# importing the waring so that it will ignore  the waring  during the porgramming 
import warnings
warnings.filterwarnings('ignore')

data.rename(columns={'Company Name':'Company_Name','Job Title':'Job_Title','Salaries Reported':'Salaries_Reported'}, inplace=True)
# Renaming  the  name of  column in dataset

df=data

df.columns # Checking  the index  and columns name

data.isnull().sum() # final just to check if there is any null value or not 
# after filling  the null value

"""# Data Analysis
 Figuring out the data categoary and plotting them  in different picture .
 After this becomes easier to model and train machine learning

## Data visualization
 Also importing some library in order to visualize the data
 Data visuliazation is needed as it represent the data in the pictorial way so that it becomes easy to understand observe and  analyze the data 
 Here using countplot() also importing new library to display the city with the highest number of job
"""

import seaborn as bee
import matplotlib.pyplot as plt
bee.countplot(data.Location)
plt.xlabel("City Name ") # naming in the X -axis 
plt.ylabel("Frequency") # naming in the y-axis 
plt.title("Location ") # Defining the title name of the bar chart 
plt.show()

"""# Displot"""

# Using displot data visulazatio in order to show Salaries reported 
bee.distplot(data['Salaries_Reported'])
#  Displaying  the parametric distribution of a dataset.

"""# Label encoding
Here Converting  categorical column  data into the  numerical number
"""

# Converting  categorical column  data into the  numerical number 
from sklearn.preprocessing import LabelEncoder 
le = LabelEncoder() 

df.Company_Name=le.fit_transform(df.Company_Name)
df.Job_Title=le.fit_transform(df.Job_Title)
df.Salaries_Reported = le.fit_transform(df.Salaries_Reported)
df.Location = le.fit_transform(df.Location)
df.Salary = le.fit_transform(df.Salary)
#testing the encoded columns
df.head() # displaying the data of first five rows of the dataset

import math
median_Company_Name=math.floor(df.Company_Name.median()) 
median_Salaries_Reported=math.floor(df.Salaries_Reported.median())

df.Company_Name=df.Company_Name.fillna(median_Company_Name) # Filling null value in missing value of named in company column ofdatset
df.Salaries_Reported=df.Salaries_Reported.fillna(median_Salaries_Reported) # Filling null value in missing value of named in Salaires column ofdatset

""" # Box Plot
 Displaying  all of the column data to show the five-number summary, which includes the first, median, and third quartiles, as well as the maximum value. It makes it easier to find the outlier, as well as showing how tightly the data are tied together and how far apart they are.
"""

df1=data.select_dtypes(exclude=['float'])
bee.boxplot(data=df1) 
plt.xlabel("Attributes")
plt.ylabel("Data Range")
plt.title("Dataset Information") # Defining the name of th b

"""# iloc function 
This function helps to select the any particular row or columun of dataset 
"""

#Defining independent variale  as y and  and dependent variables as the X  in the dataset 
dataSet = df[['Company_Name','Job_Title','Salaries_Reported' ,'Location','Salary']]
X= dataSet.iloc[: , 1:4] # SLicing the cloumn data till Location withe the starting at JOb_title 
Y = dataSet.iloc[: , 4] # to print after 4th indexing that is Salary 

#testing the dataset
print(X.head())
print(Y.head())

#Preprocessing of the independent variables 
n = len(X.columns)
for i in range (0,n+1):
    X.iloc[:, :i]= X.iloc[:, :i]/np.max(X.iloc[:, :i]) 
    
#verifying  the normalized values 
print(X.head())

# initilazing the theta variables 
theta = np.array([0]*n)

# creating a function to calculate the value  of theta*X
def hypothesis(theta,X): # defining pramaters and passing theta ,X 
    return theta*X

m = len(dataSet) # Len function that calculate the lenght of teh 
# Defing the Function for Salary prediction 
def Salary_predict(X,y,theta): # Defining the paramaters and passing X,y and theta 
    y1= hypothesis(theta,X) # Calling above function 
    y1=np.sum(y1,axis=1)
    add= (np.sum(y1-y)**2/(2*m)) 
    return np.sqrt(add) # returns the square root

"""# GradientDescent
It is an algorthim that is used to find the minimum on the function
"""

def gradientDescent(X, y, theta, alpha, i):    
  #  seting  of parameters to implement the gradient descent algorithm.
    J = []  #salary prediction function in each iterations
    k = 0
    while k < i:
        y1 = hypothesis(theta, X)
        y1 = np.sum(y1, axis=1)
        for c in range(0, n):
            theta[c] = theta[c] - alpha*(sum((y1-y)*(X.iloc[:,c])/n))
        j =  Salary_predict(X, y, theta)
        J.append(j)
        k += 1
    return J, j, theta

J,j,theta = gradientDescent(X,Y,theta, 0.0001,10000)

#calculating the predicted values
y_pred = hypothesis(theta, X)
y_pred= np.sum(y_pred, axis=1)

"""# Here checking the accuray of given data """

#checking the accuracy of the predidctive model.

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score 
model = LinearRegression().fit(X,Y) #modeling the realation ship between independent variabels and dependent vairables 
print(model.score(X,Y))

"""## Display the Scatter figure"""

#plotting the scatter plot for actual and predicted value of y
plt.figure()
plt.scatter(x=list(range(0,m)),y= Y,color='blue')    
plt.scatter(x=list(range(0,m)), y=y_pred, color='red')
plt.show()

#Plottng the graph for iterated salray prediction function .
plt.figure()
plt.scatter(x=list(range(0,10000)), y=J)
plt.ylabel(' Yearly Salary')
plt.xlabel('iretation')
plt.show()